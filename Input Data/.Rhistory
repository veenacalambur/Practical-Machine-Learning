warnings()
modFit.lm
modFit.lm
preProcess.varlist = which(lapply(train.train.cleaned, class) %in% "numeric")
preProcess.Obj = preProcess(train.train.cleaned[,preProcess.varlist],method=c('knnImpute', 'center', 'scale'))
train.train.processed = predict(preProcess.Obj, train.train.cleaned[,preProcess.varlist])
train.train.processed$classe = train.train.cleaned$classe
train.test.processed = predict(preProcess.Obj, train.test.cleaned[,preProcess.varlist])
train.test.processed$classe = train.test.cleaned$classe
test.processed = predict(preProcess.Obj, test.cleaned[,preProcess.varlist])
test.processed$classe = test.cleaned$classe
fit = train(classe ~., method="rf", data=train.train.processed, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit <- train( train.train.processed$classe ~ ., data =  train.train.processed, method="rpart")
View(train.train.NZV)
nrow(train.train.cleaned%>%filter(!is.na(amplitude_yaw_belt)))
nrow(train.train.cleaned%>%filter(!is.na(min_pitch_belt)))
nrow(train.train.cleaned%>%filter(!is.na(total_accel_arm)))
modFit <- train( train.train.processed$classe ~ ., data =  train.train.processed, method="rpart")
print(modFit, digits=3)
View( train.train.processed)
modFit <- train(classe ~ ., data =  train.train.processed, method="rpart")
modFit
modFit.tree1 <- train(classe ~ ., data =  train.train.processed, method="rf")
for(i in names(train.train.cleaned)){}
for(i in names(train.train.cleaned)){print(i)}
i
nrow(df%>%filter_(i))
library(dplyr)
nrow(df%>%filter_(i))
?_filter
find.NA.vars <- function(df){
num_vars = ncol(df)
do_not_include = c()
for(i in names(df)){
filter.cond = interp(~filter(var1), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) <= 0.5){
do_not_include = c(do_not_include, i)
}
}
return(do_not)
}
a<- find.NA.vars(test.test.cleaned)
a<- find.NA.vars(train.train)
library(lazyeval)
a<- find.NA.vars(train.train)
df<- train.train
num_vars = ncol(df)
num_vars
do_not_include = c()
i = names(df)[10]
i
filter.cond = interp(~filter(var1), var1 = as.name(i))
filter.cond
nrow(df%>%filter_(filter.cond))/nrow(df)
nrow(df%>%filter(filter.cond))/nrow(df)
df%>%filter_(filter.cond))
df%>%filter_(filter.cond) ->a
head(df$yaw_belt)
tail(df$yaw_belt)
filter.cond = interp(~filter(!is.na(var1)), var1 = as.name(i))
nrow(nrow(df%>%filter_(filter.cond))/nrow(df))
test = df%>%filter_(filter.cond)
i
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
test = df%>%filter_(filter.cond)
find.NA.vars <- function(df){
num_vars = ncol(df)
do_not_include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) <= 0.5){
do_not_include = c(do_not_include, i)
}
}
return(do_not_include)
}
a<- find.NA.vars(train.train)
a
train.train.cleaned <- train.train[, do_not_include]
train.train.cleaned <- train.train[, do_not_include]
dim(train.train.cleaned)
do_not_include<- find.NA.vars(train.train)
train.train.cleaned <- train.train[, -do_not_include]
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.5){
include = c(include, i)
}
}
return(include)
}
var.include <- find.NA.vars(train.train)
train.train.cleaned <- train.train[, var.include]
dim(train.train.cleaned)
train.train.noNA <- train.train[, var.include]
train.train.NZV <- nearZeroVar(train.train.noNA, saveMetrics=TRUE)
train.train.NZV.varlist = row.names(train.train.NZV[train.train.NZV$nzv == FALSE,])
train.train.cleaned <- train.train.noNA[,train.train.NZV.varlist]
dim(train.train.cleaned)
View(train.train.cleaned)
nrow(train.train.cleaned%>%filter(complete.cases(.)))
preProcess.tree1.varlist = which(lapply(train.train.cleaned, class) %in% "numeric")
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.varlist],method=c('center', 'scale'))
preProcess.tree1.varlist
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.varlist],method=c('center', 'scale'))
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.tree1.varlist],method=c('center', 'scale'))
train.train.tree1.processed = predict(preProcess.tree1.Obj, train.train.cleaned[,preProcess.tree1.varlist])
train.train.tree1.processed$classe = train.train.cleaned$classe
modFit.tree1 <- train(classe ~ ., data =  test.tree1.processed, method="rpart")
modFit.tree1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rpart")
modFit.tree1
modFit.tree1 <- train(classe ~ ., data =  train.train.processed, method="rf")
dim(train.train.processed)
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.75){
include = c(include, i)
}
}
return(include)
}
var.include <- find.NA.vars(train.train)
train.train.noNA <- train.train[, var.include]
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.75){
include = c(include, i)
}
}
return(include)
}
var.include <- find.NA.vars(train.train)
train.train.noNA <- train.train[, var.include]
train.train.NZV <- nearZeroVar(train.train.noNA, saveMetrics=TRUE)
train.train.NZV.varlist = row.names(train.train.NZV[train.train.NZV$nzv == FALSE,])
train.train.cleaned <- train.train.noNA[,train.train.NZV.varlist]
preProcess.tree1.varlist = which(lapply(train.train.cleaned, class) %in% "numeric")
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.tree1.varlist],method=c('center', 'scale'))
train.train.tree1.processed = predict(preProcess.tree1.Obj, train.train.cleaned[,preProcess.tree1.varlist])
train.train.tree1.processed$classe = train.train.cleaned$classe
dim(train.train.tree1.processed)
modFit.tree1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rpart")
modFit.tree1
modFit.tree1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rf")
dim(train.train.tree1.processed)
head(train.train.tree1.processed)
modFit.tree1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rf",  trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit.tree1
modFit.tree1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rpart")
modFit.tree1
modFit.rf1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rf",  trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.tree1.varlist],method=c('knnImpute', 'center', 'scale'))
train.train.tree1.processed = predict(preProcess.tree1.Obj, train.train.cleaned[,preProcess.tree1.varlist])
train.train.tree1.processed$classe = train.train.cleaned$classe
modFit.rf1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rf",  trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
dim(train.train.tree1.processed)
nrow(train.train.tree1.processed%>%filter(complete.cases(.)))
modFit.rf1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rf",  trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
library(randomForest)
library(randomForest)
library(dplyr)
library(knitr)
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
train <- read.csv("pml-training.csv")
names(train)
str(train)
table(train$classe)
modelset <- train[,c(1:11, 37:49 ,60:68, 84:86, 160) ]
modelset1 <- na.omit(modelset)
testset1<-test[,c(1:11, 37:49 ,60:68, 84:86, 160) ]
library(randomForest)
rf1<-randomForest(modelset$classe ~ ., data=modelset,importance=T)
rf1$confusion
modelset2 <- modelset[,c(2, 8:37)]
par(mfrow=c(1,1))
varImpPlot(rf2,type=1,scale=F,
main="Forecasting Importance Plot for admit
(Unstandardized)",col="blue",cex=1,pch=19)
predict(rf1, testset1, type="response")
modelset2 <- modelset[,c(2, 8:37)]
rf2 <- randomForest(modelset2$classe ~ ., data=modelset2,importance=T)
rf2$confusion
par(mfrow=c(1,1))
varImpPlot(rf2,type=1,scale=F,
main="Forecasting Importance Plot for admit
(Unstandardized)",col="blue",cex=1,pch=19)
predict(rf1, testset1, type="response")
dim(testset1)
library(dplyr)
setdiff(names(modelset1), names(testset1))
names(testset1[,-37])
predict(rf1, testset1[-37,], type="response")
predict(rf1, testset1[,-37], type="response")
setdiff(names(testset1), names(modelset1))
names(testset1)
names(modelset1)
View(testset1)
setdiff(names(modelset), names(testset1))
setdiff(names(testset1), names(modelset))
View(test)
which(colnames(test)) == "problem_id"
which(colnames(test) == "problem_id")
which(colnames(train) == "problem_id")
which(colnames(testset1) == "problem_id")
predict(rf1, testset1[,-37], type="response")
modFit.rf1 <- randomForest(classe ~ ., data =  train.train.tree1.processed, importance = T)
library(caret)
library(ggplot2)
library(randomForest)
library(rpart.plot)
library(rattle)
set.seed(12345)
setwd("~/Data Science Training/Practical Machine Learning/Input Data")
train = read.csv("pml-training.csv")
test = read.csv("pml-testing.csv")
dim(train); dim(test);
#split train for train/testing purpose (train.train and train.test)
train.inTrain = createDataPartition(train$classe, p = 0.6, list = FALSE)
train.train = train[train.inTrain,]
train.test = train[-train.inTrain,]
dim(train.train); dim(train.test)
```
train.inTrain = createDataPartition(train$classe, p = 0.6, list = FALSE)
train.train = train[train.inTrain,]
train.test = train[-train.inTrain,]
dim(train.train); dim(train.test)
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.75){
include = c(include, i)
}
}
return(include)
}
var.include <- find.NA.vars(train.train)
train.train.noNA <- train.train[, var.include]
train.train.NZV <- nearZeroVar(train.train.noNA, saveMetrics=TRUE)
train.train.NZV.varlist = row.names(train.train.NZV[train.train.NZV$nzv == FALSE,])
train.train.cleaned <- train.train.noNA[,train.train.NZV.varlist]
preProcess.tree1.varlist = which(lapply(train.train.cleaned, class) %in% "numeric")
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.tree1.varlist],method=c('knnImpute', 'center', 'scale'))
train.train.tree1.processed = predict(preProcess.tree1.Obj, train.train.cleaned[,preProcess.tree1.varlist])
train.train.tree1.processed$classe = train.train.cleaned$classe
modFit.rf1 <- randomForest(classe ~ ., data =  train.train.tree1.processed, importance = T)
modFit.rf1
rf1
rf1<-randomForest(modelset$classe ~ ., data=modelset,importance=T)
modelset <- train[,c(1:11, 37:49 ,60:68, 84:86, 160) ]
modelset1 <- na.omit(modelset)
testset1<-test[,c(1:11, 37:49 ,60:68, 84:86, 160) ]
rf1<-randomForest(modelset$classe ~ ., data=modelset,importance=T)
rf1
train.train.NZV <- nearZeroVar(train.train.noNA, saveMetrics=TRUE)
train.train.NZV.varlist = row.names(train.train.NZV[train.train.NZV$nzv == FALSE,])
train.train.cleaned <- train.train.noNA[,train.train.NZV.varlist]
preProcess.tree1.varlist = which(lapply(train.train.cleaned, class) %in% "numeric")
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.tree1.varlist],method=c('center', 'scale'))
train.train.tree1.processed = predict(preProcess.tree1.Obj, train.train.cleaned[,preProcess.tree1.varlist])
train.train.tree1.processed$classe = train.train.cleaned$classe
modFit.rf1 <- randomForest(classe ~ ., data =  train.train.tree1.processed, importance = T)
modFit.rf1
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.5){
include = c(include, i)
}
}
return(include)
}
var.include <- find.NA.vars(train.train)
train.train.noNA <- train.train[, var.include]
train.train.NZV <- nearZeroVar(train.train.noNA, saveMetrics=TRUE)
train.train.NZV.varlist = row.names(train.train.NZV[train.train.NZV$nzv == FALSE,])
train.train.cleaned <- train.train.noNA[,train.train.NZV.varlist]
preProcess.tree1.varlist = which(lapply(train.train.cleaned, class) %in% "numeric")
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.tree1.varlist],method=c('knnImpute','center', 'scale'))
train.train.tree1.processed = predict(preProcess.tree1.Obj, train.train.cleaned[,preProcess.tree1.varlist])
train.train.tree1.processed$classe = train.train.cleaned$classe
modFit.rf1 <- randomForest(classe ~ ., data =  train.train.tree1.processed, importance = T)
modFit.rf1
train.test.tree1.processed = predict(preProcess.tree1.Obj, train.test.cleaned[,preProcess.tree1.varlist])
train.test.tree1.processed$classe = train.test.cleaned$classe
train.test.tree1.processed = predict(preProcess.tree1.Obj, train.test[,preProcess.tree1.varlist])
train.test.tree1.processed$classe = train.test$classe
train.test.tree1.processed = predict(preProcess.tree1.Obj, train.test[,preProcess.tree1.varlist])
preProcess.tree1.Obj
preProcess.tree1.varlist
names(train.test)[preProcess.tree1.varlist]
names(train.train)[preProcess.tree1.varlist]
train.test.tree1.processed = predict(preProcess.tree1.Obj, train.test[,preProcess.tree1.varlist])
preProcess.tree1.Obj
train.test.tree1.processed = predict(preProcess.tree1.Obj, train.test[,preProcess.tree1.varlist])
View(train.test[,preProcess.tree1.varlist])
setdiff(names(train.test[,preProcess.tree1.varlist]), names(train.train[,preProcess.tree1.varlist]))
setdiff( names(train.train[,preProcess.tree1.varlist]), names(train.test[,preProcess.tree1.varlist]))
train.test.tree1.processed = predict(preProcess.tree1.Obj, train.test[,preProcess.tree1.varlist])
preProcess.tree1.Obj
names(train.train.cleaned[,preProcess.tree1.varlist])
names(train.test[,preProcess.tree1.varlist])
length( names(train.train.cleaned[,preProcess.tree1.varlist]))
length(names(train.test[,preProcess.tree1.varlist]))
setdiff(names(train.test[,preProcess.tree1.varlist]), names(train.train.cleaned[,preProcess.tree1.varlist]))
train.test.cleaned <- train.test[,train.train.NZV.varlist]
train.test.tree1.processed = predict(preProcess.tree1.Obj, train.test.cleaned[,preProcess.tree1.varlist])
train.test.tree1.processed$classe = train.test$classe
predict(modFit.tree1, train.test.tree1.processed)
modFit.tree1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rpart")
predict(modFit.tree1, train.test.tree1.processed)
confusionMatrix(train.test$classe, predict(modFit.tree1, train.test.tree1.processed))
modFit.tree1
```{r processing, echo = FALSE}
# function to throw out NA values for a given DF
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.75){
include = c(include, i)
}
}
return(include)
}
# determine values to be tossed out
var.include <- find.NA.vars(train.train)
train.noNA <- train[, var.include]
# find all "near zero variables" and remove those from the train / test set
train.NZV <- nearZeroVar(train.noNA, saveMetrics=TRUE)
train.NZV.varlist = row.names(train.NZV[train.NZV$nzv == FALSE,])
train.cleaned <- train.noNA[,train.NZV.varlist]
test.cleaned <- test[,train.NZV.varlist]
# preProcess data by normalizing the data - knnIMmputes, center and scale the values
preProcess.rf1.varlist = which(lapply(train.cleaned, class) %in% "numeric")
preProcess.rf1.Obj = preProcess(train.cleaned[,preProcess.rf1.varlist],method=c('knnImpute','center', 'scale'))
# process the train / test data sets:
train.rf1.processed = predict(preProcess.rf1.Obj, train.cleaned[,preProcess.rf1.varlist])
train.rf1.processed$classe = train.cleaned$classe
test.rf1.processed = predict(preProcess.rf1.Obj, test.cleaned[,preProcess.rf1.varlist])
test.rf1.processed$classe = test$classe
```
Method 2: Random Forest
```{r processing, echo = TRUE}
modFit.rf1 <- randomForest(classe ~ ., data =  train.rf1.processed, importance="T")
modFit.rf1
test.rf1.processed$classe = test$classe
test.rf1.processed = predict(preProcess.rf1.Obj, test.cleaned[,preProcess.rf1.varlist])
# function to throw out NA values for a given DF
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.75){
include = c(include, i)
}
}
return(include)
}
# determine values to be tossed out
var.include <- find.NA.vars(train.train)
train.noNA <- train[, var.include]
# find all "near zero variables" and remove those from the train / test set
train.NZV <- nearZeroVar(train.noNA, saveMetrics=TRUE)
train.NZV.varlist = row.names(train.NZV[train.NZV$nzv == FALSE,])
train.cleaned <- train.noNA[,train.NZV.varlist]
test.cleaned <- test[,train.NZV.varlist]
# preProcess data by normalizing the data - knnIMmputes, center and scale the values
preProcess.rf1.varlist = which(lapply(train.cleaned, class) %in% "numeric")
preProcess.rf1.Obj = preProcess(train.cleaned[,preProcess.rf1.varlist],method=c('knnImpute','center', 'scale'))
# process the train / test data sets:
train.rf1.processed = predict(preProcess.rf1.Obj, train.cleaned[,preProcess.rf1.varlist])
train.rf1.processed$classe = train.cleaned$classe
test.rf1.processed = predict(preProcess.rf1.Obj, test.cleaned[,preProcess.rf1.varlist])
test.rf1.processed$classe = test$classe
train.NZV.varlist
names(test[,train.NZV.varlist])
setdiff(train.NZV.varlist, names(test))
test.cleaned <- test[,train.NZV.varlist[,-59]]
test.cleaned <- test[,train.NZV.varlist[-59]]
preProcess.rf1.varlist = which(lapply(train.cleaned, class) %in% "numeric")
preProcess.rf1.Obj = preProcess(train.cleaned[,preProcess.rf1.varlist],method=c('knnImpute','center', 'scale'))
train.rf1.processed = predict(preProcess.rf1.Obj, train.cleaned[,preProcess.rf1.varlist])
train.rf1.processed$classe = train.cleaned$classe
test.rf1.processed = predict(preProcess.rf1.Obj, test.cleaned[,preProcess.rf1.varlist])
test.rf1.processed$classe = test$classe
test$classe
test.rf1.processed = predict(preProcess.rf1.Obj, test.cleaned[,preProcess.rf1.varlist])
test_prediction = predict(modFit.rf1, test.rf1.processed)
test_prediction
modFit.rf1 <- randomForest(classe ~ ., data =  train.rf1.processed, importance="T")
modFit.rf1 <- randomForest(classe ~ ., data =  train.rf1.processed, importance="T")
test.rf1.processed = predict(preProcess.rf1.Obj, test.cleaned[,preProcess.rf1.varlist])
modFit.rf1 <- randomForest(classe ~ ., data =  train.rf1.processed, importance="T")
nrow(train.rf1.processed%>%filter(complete.cases(.)))
nrow(train.rf1.processed)
modFit.rf1 <- randomForest(classe ~ ., data =  train.rf1.processed, importance="T")
summary(train.rf1.processed)
warnings()
View(train.rf1.processed)
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.75){
include = c(include, i)
}
}
return(include)
}
var.include <- find.NA.vars(train)
train.noNA <- train[, var.include]
train.NZV <- nearZeroVar(train.noNA, saveMetrics=TRUE)
train.NZV.varlist = row.names(train.NZV[train.NZV$nzv == FALSE,])
train.cleaned <- train.noNA[,train.NZV.varlist]
test.cleaned <- test[,train.NZV.varlist[-59]]
preProcess.rf1.varlist = which(lapply(train.cleaned, class) %in% "numeric")
preProcess.rf1.Obj = preProcess(train.cleaned[,preProcess.rf1.varlist],method=c('knnImpute','center', 'scale'))
train.rf1.processed = predict(preProcess.rf1.Obj, train.cleaned[,preProcess.rf1.varlist])
train.rf1.processed$classe = train.cleaned$classe
test.rf1.processed = predict(preProcess.rf1.Obj, test.cleaned[,preProcess.rf1.varlist])
modFit.rf1 <- randomForest(classe ~ ., data =  train.rf1.processed, importance="T")
View(train.rf1.processed)
train.rf1.processed$classe = train.cleaned$classe
train.rf1.processed$classe = train.cleaned$classe
modFit.rf1 <- randomForest(classe ~ ., data =  train.rf1.processed, importance="T")
class(train.rf1.processed$classe)
modFit.rf1 <- randomForest(as.factor(classe) ~ ., data =  train.rf1.processed, importance="T")
str( train.rf1.processed)
unique( train.rf1.processed$roll_belt)
str( train.rf1.processed)
modFit.tree1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rpart")
modFit.rf1 <- randomForest(train.rf1.processed$classe ~., data =  train.rf1.processed, importance="T")
preProcess.rf1.varlist
train.rf1.processed$classe = train.cleaned$classe
head(train.rf1.processed)
library(caret)
library(ggplot2)
library(randomForest)
set.seed(12345)
setwd("~/Data Science Training/Practical Machine Learning/Input Data")
train = read.csv("pml-training.csv")
test = read.csv("pml-testing.csv")
dim(train); dim(test);
#split train for train/testing purpose (train.train and train.test)
train.inTrain = createDataPartition(train$classe, p = 0.6, list = FALSE)
train.train = train[train.inTrain,]
train.test = train[-train.inTrain,]
dim(train.train); dim(train.test)
find.NA.vars <- function(df){
num_vars = ncol(df)
include = c()
for(i in names(df)){
filter.cond = interp(~ (!is.na(var1)), var1 = as.name(i))
if(nrow(df%>%filter_(filter.cond))/nrow(df) > 0.75){
include = c(include, i)
}
}
return(include)
}
# determine values to be tossed out
var.include <- find.NA.vars(train.train)
train.train.noNA <- train.train[, var.include]
# find all "near zero variables" and remove those from the train / test set
train.train.NZV <- nearZeroVar(train.train.noNA, saveMetrics=TRUE)
train.train.NZV.varlist = row.names(train.train.NZV[train.train.NZV$nzv == FALSE,])
train.train.cleaned <- train.train.noNA[,train.train.NZV.varlist]
train.test.cleaned <- train.test[,train.train.NZV.varlist]
# preProcess data by normalizing the data - knnIMmputes, center and scale the values
preProcess.tree1.varlist = which(lapply(train.train.cleaned, class) %in% "numeric")
preProcess.tree1.Obj = preProcess(train.train.cleaned[,preProcess.tree1.varlist],method=c('knnImpute','center', 'scale'))
# process the train / test data sets:
train.train.tree1.processed = predict(preProcess.tree1.Obj, train.train.cleaned[,preProcess.tree1.varlist])
train.train.tree1.processed$classe = train.train.cleaned$classe
train.test.tree1.processed = predict(preProcess.tree1.Obj, train.test.cleaned[,preProcess.tree1.varlist])
train.test.tree1.processed$classe = train.test$classe
modFit.tree1 <- train(classe ~ ., data =  train.train.tree1.processed, method="rpart")
modFit.tree1
confusionMatrix(train.test$classe, predict(modFit.tree1, train.test.tree1.processed))
var.include <- find.NA.vars(train)
train.noNA <- train[, var.include]
train.NZV <- nearZeroVar(train.noNA, saveMetrics=TRUE)
train.NZV.varlist = row.names(train.NZV[train.NZV$nzv == FALSE,])
train.cleaned <- train.noNA[,train.NZV.varlist]
test.cleaned <- test[,train.NZV.varlist[-59]]
preProcess.rf1.varlist = which(lapply(train.cleaned, class) %in% "numeric")
preProcess.rf1.Obj = preProcess(train.cleaned[,preProcess.rf1.varlist],method=c('knnImpute','center', 'scale'))
train.rf1.processed = predict(preProcess.rf1.Obj, train.cleaned[,preProcess.rf1.varlist])
train.rf1.processed$classe = train.cleaned$classe
test.rf1.processed = predict(preProcess.rf1.Obj, test.cleaned[,preProcess.rf1.varlist])
modFit.rf1 <- randomForest(train.rf1.processed$classe ~., data =  train.rf1.processed, importance="T")
modFit.rf1
length(train.cleaned$classe)
nrow(test.rf1.processed%>%filter(complete.cases(.)))
nrow(train.rf1.processed%>%filter(complete.cases(.)))
nrow(train.rf1.processed%>%filter(complete.cases(.)))/nrow(train.rf1.processed)
